{"version":3,"sources":["wdyr.js","features/keyComp/keyCommandSlice.js","constants/colors.js","constants/keyBind.js","constants/saveStatus.js","config/pouchdb.js","config/localStorage.js","config/indexDB.js","model/documentModel.js","features/document/documentSlice.js","components/Nav/Nav.jsx","components/SaveStatus/SaveStatus.jsx","pages/Document.jsx","features/autoSave/autoSaveSlice.js","components/RightSideBar/RightSideBar.jsx","App.jsx","app/store.js","index.js"],"names":["require","whyDidYouRender","React","trackAllPureComponents","keyCommandSlice","createSlice","name","initialState","keyCommand","reducers","add","state","action","payload","clear","actions","colors","keyBind","saveStatus","YELLOW_DEFAULT","GREEN_DEFAULT","GRAY_LIGHT","pouchdb","window","localStorage","indexedDB","open","PouchDB","documentModel","getAllDocuments","a","allDocs","include_docs","rs","rows","map","item","doc","saveDocument","put","force","ok","createAsyncThunk","documents","documentSlice","currentSelectedDocument","_id","title","content","loading","updateCurrentSelectedDocument","Object","assign","selectDocument","find","addDocument","push","updateDocumentOnClient","extraReducers","fulfilled","addDocumentThunk","dispatch","setEditableTitle","console","log","_rev","NavItem","useSelector","useState","editableTitle","useDispatch","cursor","onClick","_hover","backgroundColor","PURPLE_LIGHT","color","GRAY_LIGHTEST","onDoubleClick","editTitle","p","onBlur","e","updateTitle","target","value","onChange","onChangeTitle","w","h","PURPLE_DEFAULT","Nav","newDoc","Date","now","toString","position","boxShadow","paddingY","marginLeft","mt","addNewDoc","SaveStatus","status","display","alignItems","borderRadius","ml","text","assignSaveDoc","contentValue","Document","props","isAutoSave","EditorState","createWithContent","ContentState","createFromText","setContent","isSaving","setIsSaving","saveInterval","setSaveInterval","useEffect","document","addEventListener","ctrlKey","metaKey","preventDefault","key","getCurrentContent","getPlainText","includes","SAVE_MACOS","SAVE_WINDOWS","clearTimeout","setTimeout","length","then","res","moveFocusToEnd","placeholder","editorState","SAVING","UP_TO_DATE","NOT_SAVED","autoSaveSlice","switchAutoSave","RightSideBar","align","direction","isChecked","size","App","templateColumns","colSpan","exact","path","store","configureStore","reducer","documentReducer","keyCommandReducer","autoSaveReducer","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dd06ce90.chunk.js","sourcesContent":["import React from 'react';\n\n    const whyDidYouRender = require('@welldone-software/why-did-you-render');\n    whyDidYouRender(React, {\n        trackAllPureComponents: true\n    })\n\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const keyCommandSlice = createSlice({\n  name: 'keyCommand',\n  initialState: {\n      keyCommand: \"\",\n  },\n  reducers: {\n    add: (state, action) => {\n        state.keyCommand += action.payload;\n    },\n    clear: (state) => {\n        state.keyCommand = \"\";\n    }\n  },\n})\n\n\nexport const {add, clear} = keyCommandSlice.actions;\n\nexport default keyCommandSlice.reducer;","const colors = {\n    'GRAY_LIGHTEST': '#FFFFFF',\n    'GRAY_LIGHTER': '#EBEBEB',\n    'GRAY_LIGHT': '#CCCCCC',\n    'GRAY_DEFAULT': '#A3A3A3',\n    'GRAY_DARK': '#7A7A7A',\n    'GRAY_DARKER': '#5C5C5C',\n    'GRAY_DARKEST': '#3D3D3D',\n    'YELLOW_DEFAULT': '#E4FF1A',\n    'GREEN_DEFAULT': '#6EEB83',\n    'PURPLE_DEFAULT': '#7e6ab4',\n    'PURPLE_LIGHT': '#a192c8'\n}\n\nexport default colors;","const keyBind = {\n    'SAVE_MACOS': 'Metas',\n    'SAVE_WINDOWS': 'Controls'\n}\n\nexport default keyBind;","import { colors } from \".\";\n\nconst saveStatus = {\n    'SAVING': {\n        'text': 'Saving',\n        'color': colors.YELLOW_DEFAULT\n    },\n    'UP_TO_DATE': {\n        'text': 'Everything is up to date',\n        'color': colors.GREEN_DEFAULT\n    },\n    'NOT_SAVED': {\n        'text': 'Work is not being saved',\n        'color': colors.GRAY_LIGHT\n    }\n}\n\nexport default saveStatus;","import PouchDB from 'pouchdb';\nconst pouchdb = new PouchDB('documents');\n\nexport default pouchdb;","const localStorage = window.localStorage;\n\nexport default localStorage;","const DBOpenRequest = window.indexedDB.open('documents', 4);\n\nexport default DBOpenRequest;","import {pouchdb} from '../config';\n\nconst getAllDocuments = async () => {\n    let rs = await pouchdb.allDocs({\n        include_docs: true\n    }) \n    return (await rs).rows.map(item => item.doc);\n}\n\nconst saveDocument =  async (doc) => {\n    let rs = await pouchdb.put(doc, {\n        force: true\n    })\n    if (rs.ok) {\n        return true;\n    }\n    return false;\n}\nconst documentModel = {\n    getAllDocuments,\n    saveDocument\n}\n\nexport default documentModel;","import { createAsyncThunk,createSlice } from '@reduxjs/toolkit';\nimport { documentAPI } from '../../apis';\nimport { documentModel } from '../../model';\n\nexport const getAllDocuments = createAsyncThunk(\n    'documents/getAllDocuments',\n    async () => {\n            let documents = await documentModel.getAllDocuments();\n            return documents;\n       }\n)\n\nexport const documentSlice = createSlice({\n  name: 'document',\n  initialState: {\n      documents: [],\n      currentSelectedDocument: {\n        _id: '',\n        title: '',\n        content: ''\n      },\n      loading: false\n  },\n  reducers: {\n    updateCurrentSelectedDocument: (state, action) => {\n        state.currentSelectedDocument = Object.assign(state.currentSelectedDocument, action.payload);\n    },\n    selectDocument: (state, action) => {\n        state.currentSelectedDocument = state.documents.find((doc) => {return doc._id == action.payload}) \n    },\n    addDocument: (state, action) => {\n        state.documents.push(action.payload); \n    },\n    updateDocumentOnClient: (state, action) => {\n        const doc = state.documents.find((doc) => {return doc._id == action.payload._id})\n        if (doc) {\n            Object.assign(doc, action.payload);\n            state.currentSelectedDocument = Object.assign(state.currentSelectedDocument, action.payload);\n        }\n    }\n  },\n  extraReducers: {\n      [getAllDocuments.fulfilled]: (state, actions) => {\n          state.documents = actions.payload\n      }\n  }\n})\n\nexport const {updateCurrentSelectedDocument, selectDocument, updateDocumentOnClient} = documentSlice.actions\n\nexport async function addDocumentThunk(dispatch, doc) {\n    await documentModel.saveDocument(doc);\n    dispatch(documentSlice.actions.addDocument(doc));\n    dispatch(selectDocument(doc._id));\n}\n\nexport default documentSlice.reducer","import React from 'react';\nimport './Nav.module.css';\nimport { Button, Box, Container, Input } from '@chakra-ui/react'\nimport { colors } from '../../constants';\nimport { useSelector, useDispatch } from 'react-redux';\nimport  {selectDocument, addDocumentThunk, updateDocumentOnClient } from '../../features/document/documentSlice';\nimport { documentModel } from '../../model';\n\nasync function editTitle(dispatch, doc, setEditableTitle) {\n        setEditableTitle(true);\n        dispatch(selectDocument(doc._id))\n}\n\nasync function onChangeTitle(dispatch, currentSelectedDocument, title) {\n    console.log(title);\n    dispatch(updateDocumentOnClient({\n        _id: currentSelectedDocument._id,\n        title: title\n    }))\n}\n\nasync function updateTitle(doc, title, setEditableTitle) {\n    let rs = await documentModel.saveDocument({\n        _rev: doc._rev,\n        _id: doc._id,\n        content: doc.content,\n        title: title,\n    })\n    console.log(rs);\n    setEditableTitle(false)\n}\n\nfunction NavItem ({doc}) {\n    const { currentSelectedDocument} = useSelector((state) => state.documents);\n    const [editableTitle, setEditableTitle] = React.useState(false); \n    const dispatch = useDispatch(); \n    return (\n        <Box>\n            <Box\n                cursor={'pointer'} \n                onClick={() => dispatch(selectDocument(doc._id))}\n                _hover={{backgroundColor: colors.PURPLE_LIGHT, color: colors.GRAY_LIGHTEST}} \n                onDoubleClick={() => editTitle(dispatch, doc, setEditableTitle)}\n                p={13}\n            >   \n            {editableTitle?\n                <Input \n                onBlur={(e) => updateTitle(currentSelectedDocument, e.target.value, setEditableTitle)}\n                value={doc.title} onChange={(e) => onChangeTitle(dispatch, currentSelectedDocument, e.target.value)} /> \n                :\n                <>\n                    <p>{doc.title}</p>\n                </>   \n            }\n            </Box>\n            {currentSelectedDocument._id == doc._id?\n                <Box w={'80%'} h={'3px'} backgroundColor={colors.PURPLE_DEFAULT}/>\n                :\n                null\n            }\n        </Box>\n         \n    )\n}\n\nfunction Nav() {\n    \n    const {documents} = useSelector((state) => state.documents);\n    const dispatch = useDispatch();\n\n    async function addNewDoc()  {\n        let newDoc = {\n            _id: Date.now().toString(),\n            title: 'Untitled Document',\n            content: ''\n        }\n        addDocumentThunk(dispatch, newDoc);\n    }\n\n    return (\n        <Box position={'relative'} h={'100%'} boxShadow={`5px 0px 0px ${colors.PURPLE_LIGHT}`}>\n            <Container paddingY={4} marginLeft={4}>\n             <Box>\n                <p>YOUR DOCUMENTS</p>\n                <Box backgroundColor={colors.PURPLE_DEFAULT} h={1} w={'50%'}/>\n            </Box>\n            \n            <Box mt={8}>\n                {documents?.map(doc => (\n                    <NavItem\n                        key={doc._id}\n                        doc={doc}\n                    />\n               ))}\n            </Box>\n            <Box mt={5}>\n                <Button \n                    onClick={() => addNewDoc()}\n                >\n                    Add new document\n                </Button>\n            </Box>\n            </Container>\n       </Box>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport {Box, Text} from '@chakra-ui/react';\n\nfunction SaveStatus({status}) {\n    return (\n        <Box display={'flex'} alignItems={'center'}>\n            <Box h={3} w={3} borderRadius={50} backgroundColor={status.color}/>\n            <Text ml={2}>{status.text}</Text>\n        </Box>\n    )\n}\n\nexport default SaveStatus;","import React from 'react';\nimport { Box, Textarea } from '@chakra-ui/react';\nimport {ContentState, Editor, EditorState} from 'draft-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { add, clear } from '../features/keyComp/keyCommandSlice';\nimport { updateDocumentOnClient, addDocumentThunk, updateCurrentSelectedDocument } from '../features/document/documentSlice';\nimport { documentModel } from '../model';\nimport { keyBind, saveStatus } from '../constants';\nimport { SaveStatus } from '../components';\n\nasync function assignSaveDoc(dispatch, currentSelectedDocument, contentValue) {\n\n    let dbResult = await documentModel.saveDocument({\n        _rev: currentSelectedDocument._rev,\n        _id: currentSelectedDocument._id,\n        title: currentSelectedDocument.title,\n        content: contentValue\n    })\n    if (dbResult) {\n        dispatch(updateDocumentOnClient({\n            _id: currentSelectedDocument._id,\n            content: contentValue\n        }))\n    } \n}\n\nfunction Document (props) {\n\n    const {currentSelectedDocument, documents} = useSelector(state => state.documents);\n    const { isAutoSave } = useSelector(state => state.isAutoSave);\n    const dispatch  = useDispatch();\n\n    const [content, setContent] = React.useState(EditorState.createWithContent(ContentState.createFromText(currentSelectedDocument.content)));\n    const {keyCommand} = useSelector((state) => state.keyCommand);\n    const [isSaving, setIsSaving] = React.useState(false);\n    const [saveInterval, setSaveInterval] = React.useState();\n\n    React.useEffect(() => {\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                e.preventDefault()\n                dispatch(add(e.key));\n            } \n            return true;\n        })\n        document.addEventListener('keyup', (e) => {\n            dispatch(clear());\n        })\n    }, [])\n    \n    React.useEffect(() => {\n        let contentValue = content.getCurrentContent().getPlainText();\n        if (keyCommand.includes(keyBind.SAVE_MACOS) || keyCommand.includes(keyBind.SAVE_WINDOWS)) {\n            if (saveInterval) {\n                clearTimeout(saveInterval);\n            }\n            setIsSaving(true)\n            setSaveInterval(setTimeout(() => {\n                setIsSaving(false);\n                assignSaveDoc(dispatch, currentSelectedDocument, contentValue);\n            }, 2000))\n           \n            dispatch(clear());\n        }\n    }, [keyCommand])\n\n    React.useEffect(() => {\n        let contentValue = content.getCurrentContent().getPlainText();\n\n        if (documents?.length == 0 && contentValue != '') {\n            let newDoc = {\n                _id: Date.now().toString(),\n                title: 'Untitled Document',\n                content: contentValue\n            }\n            addDocumentThunk(dispatch, newDoc);\n        }\n        // Auto Save\n        if (currentSelectedDocument._id != '' && isAutoSave) {\n            if (saveInterval) {\n                clearTimeout(saveInterval);\n            }\n            setIsSaving(true)\n            setSaveInterval(setTimeout(() => {\n                assignSaveDoc(dispatch, currentSelectedDocument, contentValue)\n                .then((res) => {\n                    setIsSaving(false);\n                })\n            }, 2000))\n        }\n    }, [content.getCurrentContent().getPlainText()])\n\n    React.useEffect(() => {\n        if (currentSelectedDocument) {\n            setContent(EditorState.moveFocusToEnd(EditorState.createWithContent(ContentState.createFromText(currentSelectedDocument.content))))\n        }\n    },[currentSelectedDocument._id])\n\n    return (\n        <Box p={10}>                       \n            {documents?.length == 0?\n                <Editor \n                    placeholder={documents?.length == 0 && 'No document found. Type something down here...' }\n                    editorState={content} \n                    onChange={(e) => setContent(e)} />    \n                :\n                <>\n                {currentSelectedDocument._id != ''?\n                <Box>\n                    {isAutoSave?\n                        <>\n                            {isSaving?\n                                <SaveStatus status={saveStatus.SAVING}/>\n                                :\n                                <SaveStatus status={saveStatus.UP_TO_DATE}/>\n                            }\n                        </>\n                        :\n                        <>\n                            {isSaving?\n                                <SaveStatus status={saveStatus.SAVING}/>\n                                :\n                                <>\n                                {currentSelectedDocument.content == content.getCurrentContent().getPlainText()?\n                                <SaveStatus status={saveStatus.UP_TO_DATE}/>\n                                    :\n                                <SaveStatus status={saveStatus.NOT_SAVED}/>\n                                }\n                                </>\n                            }\n                        </>   \n                    }                    \n                    <Editor\n                        editorState={content} \n                        onChange={(e) => setContent(e)}\n                    />    \n                    </Box>\n                    :\n                    <p>Select a document to edit or create a new one</p>                \n                }\n                </>\n            }\n        </Box>\n    )\n}\n\nexport default Document;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const autoSaveSlice = createSlice({\n  name: 'autoSave',\n  initialState: {\n      isAutoSave: true\n  },\n  reducers: {\n    switchAutoSave: (state) => {\n        state.isAutoSave = !state.isAutoSave;\n    }\n  },\n})\n\n\nexport const {switchAutoSave} = autoSaveSlice.actions;\n\nexport default autoSaveSlice.reducer;","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { switchAutoSave } from '../../features/autoSave/autoSaveSlice';\nimport { Box, Stack, Switch } from '@chakra-ui/react'\n\nfunction RightSideBar() {\n\n    const {isAutoSave} = useSelector((state) => state.isAutoSave);\n    const dispatch = useDispatch();\n\n    return (\n        <Box mt={4}>\n            <Stack align=\"center\" direction=\"row\">\n                <Switch isChecked={isAutoSave} onChange={() => dispatch(switchAutoSave())} size=\"sm\" />\n                <p>Auto save</p>\n            </Stack>\n        </Box>\n    )\n}\n\nexport default RightSideBar;","import './wdyr';\nimport {Document} from './pages'\nimport './App.css'\nimport { Nav } from './components'\nimport { Grid, GridItem, Box} from '@chakra-ui/react';\nimport { BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\nimport React from 'react';\nimport { getAllDocuments } from './features/document/documentSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport RightSideBar from './components/RightSideBar/RightSideBar';\nconst App = () => {\n\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(getAllDocuments())\n  },[])\n\n  return (\n    <Grid h={'100vh'} templateColumns=\"repeat(5,1fr)\">\n      <GridItem colSpan={1}>\n        <Nav/>\n      </GridItem>\n      <GridItem colSpan={3}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Document/>\n            </Route>\n          </Switch>\n        </Router>\n      </GridItem>\n      <GridItem colSpan={1}>\n        <RightSideBar/>\n      </GridItem>\n    </Grid>\n  )\n}\n\nApp.whyDidYouRender = true\n\nexport default App\n","import {configureStore} from '@reduxjs/toolkit';\nimport {autoSaveReducer, documentReducer, keyCommandReducer} from '../features';\n\nexport const store = configureStore({\n    reducer: {\n        documents: documentReducer,\n        keyCommand: keyCommandReducer,\n        isAutoSave: autoSaveReducer \n    },\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.jsx'\nimport { Provider } from 'react-redux'\nimport { store } from './app/store'\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\nimport {Fonts} from \"./Fonts\"\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <Provider store={store}>\n        <App />    \n      </Provider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}